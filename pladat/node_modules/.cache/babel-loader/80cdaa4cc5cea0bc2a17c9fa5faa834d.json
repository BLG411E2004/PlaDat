{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\SignUpCompany.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nfunction SignUpCompany() {\n  _s();\n\n  const [loadingCircle, setLoadingCircle] = useState(\"block\");\n  const [content, setContent] = useState(\"none\");\n  const [city, setCity] = useState([]);\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false); //for firebase\n\n  const {\n    signup\n  } = useAuth();\n  const history = useHistory();\n  const signUpSchema = Yup.object().shape({\n    name: Yup.string().min(2, \"Company name is too short\").required(\"Company name is required\"),\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Email is required\"),\n    city: Yup.number().required(\"Please select a city\"),\n    password: Yup.string().required(\"Password is required\").min(8, \"pass 8\"),\n    confirmPassword: Yup.string().required(\"Passwords must match\").oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n  });\n\n  function formatCity(data) {\n    var formatted_array = [];\n\n    for (var i = 0; i < data.length; i++) {\n      formatted_array.push({\n        value: data[i]._id,\n        label: data[i].name\n      });\n    }\n\n    return formatted_array;\n  }\n\n  async function getCity() {\n    const response = await fetch(\"/GetCity\");\n    const data = await response.json();\n    const cities = formatCity(data);\n    setCity(cities);\n    setLoadingCircle(\"none\");\n    setContent(\"block\");\n  }\n\n  async function postData(company) {\n    delete company.confirmPassword;\n    const response = await fetch(\"/SignUpCompany\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify(company)\n    });\n    console.log(response.status);\n    return response;\n  } //TODO: If one of the sign up attempts fails the other one sould be deleted\n\n\n  async function handleSubmit(values) {\n    try {\n      setError(\"\");\n      setLoading(true);\n      const response = await postData(values);\n      await signup(values.email, values.password);\n\n      if (response.ok) {\n        console.log(\"okkkk\");\n        history.push(\"/Home\");\n      } else {\n        console.log(\"nöööö\");\n        setError(\"Failed to create an account on mongoDB\");\n      }\n    } catch {\n      console.log(\"catch\");\n      setError(\"Failed to create an account on firebase\");\n    }\n\n    setLoading(false);\n  }\n\n  if (city.length < 1) {\n    getCity();\n  } //TODO: There should bu be an alert if sign up fails\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: loadingCircle\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: content\n      },\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: \"\",\n          email: \"\",\n          city: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        },\n        onSubmit: handleSubmit,\n        validationSchema: signUpSchema,\n        children: formik => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            name: \"name\",\n            label: \"Name\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            name: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            fullWidth: true,\n            name: \"city\",\n            label: \"City\",\n            options: city,\n            component: Select\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            fullWidth: true,\n            name: \"password\",\n            label: \"Password\",\n            type: \"password\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            fullWidth: true,\n            name: \"confirmPassword\",\n            label: \"Confirm Password\",\n            type: \"password\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            type: \"submit\",\n            disabled: !formik.dirty || !formik.isValid || loading,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Forgot password?\", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/ResetPassword\",\n        children: \"Reset password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Have an account?\", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/Home/SignIn\",\n        children: \"Sign in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpCompany, \"mgi4CXczLmdpxszPJBUlmQ6MoN0=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = SignUpCompany;\nexport default SignUpCompany;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpCompany\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/SignUpCompany.js"],"names":["React","useState","Formik","Form","Field","Yup","TextField","Select","CircularProgress","useAuth","Button","useHistory","Link","SignUpCompany","loadingCircle","setLoadingCircle","content","setContent","city","setCity","error","setError","loading","setLoading","signup","history","signUpSchema","object","shape","name","string","min","required","email","number","password","confirmPassword","oneOf","ref","formatCity","data","formatted_array","i","length","push","value","_id","label","getCity","response","fetch","json","cities","postData","company","method","headers","body","JSON","stringify","console","log","status","handleSubmit","values","ok","display","formik","dirty","isValid"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nfunction SignUpCompany() {\r\n  const [loadingCircle, setLoadingCircle] = useState(\"block\");\r\n  const [content, setContent] = useState(\"none\");\r\n  const [city, setCity] = useState([]);\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(false); //for firebase\r\n  const { signup } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const signUpSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, \"Company name is too short\")\r\n      .required(\"Company name is required\"),\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Email is required\"),\r\n    city: Yup.number().required(\"Please select a city\"),\r\n    password: Yup.string().required(\"Password is required\").min(8, \"pass 8\"),\r\n    confirmPassword: Yup.string()\r\n      .required(\"Passwords must match\")\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\r\n  });\r\n\r\n  function formatCity(data) {\r\n    var formatted_array = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n      formatted_array.push({\r\n        value: data[i]._id,\r\n        label: data[i].name,\r\n      });\r\n    }\r\n    return formatted_array;\r\n  }\r\n\r\n  async function getCity() {\r\n    const response = await fetch(\"/GetCity\");\r\n    const data = await response.json();\r\n    const cities = formatCity(data);\r\n    setCity(cities);\r\n    setLoadingCircle(\"none\");\r\n    setContent(\"block\");\r\n  }\r\n\r\n  async function postData(company) {\r\n    delete company.confirmPassword;\r\n    const response = await fetch(\"/SignUpCompany\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify(company),\r\n    });\r\n    console.log(response.status);\r\n    return response;\r\n  }\r\n  //TODO: If one of the sign up attempts fails the other one sould be deleted\r\n  async function handleSubmit(values) {\r\n    try {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      const response = await postData(values);\r\n      await signup(values.email, values.password);\r\n      if (response.ok) {\r\n        console.log(\"okkkk\");\r\n        history.push(\"/Home\");\r\n      } else {\r\n        console.log(\"nöööö\");\r\n        setError(\"Failed to create an account on mongoDB\");\r\n      }\r\n    } catch {\r\n      console.log(\"catch\");\r\n      setError(\"Failed to create an account on firebase\");\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  if (city.length < 1) {\r\n    getCity();\r\n  }\r\n  //TODO: There should bu be an alert if sign up fails\r\n  return (\r\n    <div>\r\n      <div style={{ display: loadingCircle }}>\r\n        <CircularProgress />\r\n      </div>\r\n\r\n      <div style={{ display: content }}>\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            email: \"\",\r\n            city: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={signUpSchema}\r\n        >\r\n          {(formik) => (\r\n            <Form>\r\n              <Field required name=\"name\" label=\"Name\" component={TextField} />\r\n              <Field\r\n                required\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                component={TextField}\r\n              />\r\n              <Field\r\n                required\r\n                fullWidth\r\n                name=\"city\"\r\n                label=\"City\"\r\n                options={city}\r\n                component={Select}\r\n              />\r\n              <Field\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                component={TextField}\r\n              />\r\n              <Field\r\n                required\r\n                fullWidth\r\n                name=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                component={TextField}\r\n              />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={!formik.dirty || !formik.isValid || loading}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <div>\r\n        Forgot password?\r\n        <Link to=\"/ResetPassword\">Reset password</Link>\r\n      </div>\r\n      <div>\r\n        Have an account?\r\n        <Link to=\"/Home/SignIn\">Sign in</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpCompany;\r\n"]},"metadata":{},"sourceType":"module"}