{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\SignUpFormCompany.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Select } from 'semantic-ui-react';\nimport $ from \"jquery\";\n\nfunction SignUpFormCompany() {\n  _s();\n\n  const [company_name, setCompanyName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  const [confirm_pass, setConfirmPass] = useState(\"\");\n  const [company_name_error, setCompanyNameError] = useState(\"\");\n  const [email_error, setEmailError] = useState(\"\");\n  const [pass_error, setPassError] = useState([]);\n  const [confirm_pass_error, setConfirmPassError] = useState(\"\");\n  const [city, setCity] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n\n  function isValid() {\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n    function hasUpper(str) {\n      return /[A-Z]/.test(str);\n    }\n\n    if (!company_name.trim()) {\n      setCompanyNameError(prevState => prevState = \"Company name is required\");\n    }\n\n    if (!email.trim()) {\n      setEmailError(prevState => prevState = \"Email required\");\n    } else if (!/^[A-Z0-9._%+-]+@[[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)) {\n      setEmailError(prevState => prevState = \"Email is invalid\");\n    }\n\n    if (!pass) {\n      setPassError(prevState => prevState.concat(\"Password is required\"));\n    }\n\n    if (pass.length < 8) {\n      setPassError(prevState => prevState.concat(\"Password needs to be at least 8 characters\\n\"));\n    }\n\n    if (!format.test(pass)) {\n      setPassError(prevState => prevState.concat(\"Passwords must contain at least one special character\\n\"));\n    }\n\n    if (!hasUpper(pass)) {\n      setPassError(prevState => prevState.concat(\"Password must contain at leat one upper case character\\n\"));\n    }\n\n    if (!confirm_pass) {\n      setConfirmPassError(prevState => prevState = \"This field is reuired\");\n    } else if (pass !== confirm_pass) {\n      setConfirmPassError(prevState => prevState = \"Passwords must match\");\n    }\n  }\n\n  function updateState(func, e) {\n    func(prevState => prevState = e.target.value);\n  } //FIXME:Con't show the error messages\n\n\n  function handleError() {\n    $(function () {\n      $(\"#submit\").on(\"click\", function () {\n        $(\"#companyNameInput\").attr(\"error\", {\n          content: company_name_error\n        });\n        $(\"#companyEmailInput\").attr(\"error\", {\n          content: email_error\n        });\n        $(\"#companyPassInput\").attr(\"error\", {\n          content: pass_error\n        });\n        $(\"#companyConfirmPassInput\").attr(\"error\", {\n          content: confirm_pass_error\n        });\n      });\n    });\n  }\n\n  async function postData() {\n    const company = {\n      name: company_name,\n      email: email,\n      password: pass\n    };\n    const response = await fetch(\"/SignUpCompany\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      \"body\": JSON.stringify(company)\n    });\n\n    if (response.ok) {\n      console.log(\"okkkk\");\n    } else {\n      console.log(\"nöööö\");\n    }\n  }\n\n  async function getCity() {\n    const response = await fetch(\"/GetCity\");\n    const data = await response.json();\n    const city = formatCity(data);\n    setCity(prevData => prevData = city);\n    setLoaded(prevData => prevData = true);\n    return city;\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    isValid();\n    postData(); //handleError();\n  }\n\n  function formatCity(data) {\n    var formatted_array = [];\n\n    for (var i = 0; i < data.length; i++) {\n      formatted_array.push({\n        key: data[i]._id,\n        text: data[i].name,\n        value: data[i]._id\n      });\n    }\n\n    return formatted_array;\n  }\n\n  if (loaded === true) {\n    const element = document.getElementById(\"form\");\n    element.removeAttribute(\"loading\");\n  }\n\n  const cities = getCity();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      id: \"form\",\n      onSubmit: e => handleSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyNameInput\",\n          fluid: true,\n          label: \"Company Name\",\n          placeholder: \"Name\",\n          value: company_name,\n          onChange: e => updateState(setCompanyName, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyEmailInput\",\n          fluid: true,\n          type: \"email\",\n          label: \"Company Email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => updateState(setEmail, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: Select,\n          options: city,\n          label: {\n            children: 'City',\n            htmlFor: 'form-select-control-city'\n          },\n          placeholder: \"City\",\n          search: true,\n          searchInput: {\n            id: 'form-select-control-gender'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyPassInput\",\n          fluid: true,\n          label: \"Enter Password\",\n          type: \"password\",\n          value: pass,\n          onChange: e => updateState(setPass, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyConfirmPassInput\",\n          fluid: true,\n          label: \"Confirm Password\",\n          type: \"password\",\n          value: confirm_pass,\n          onChange: e => updateState(setConfirmPass, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n        id: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpFormCompany, \"+mWSfwNwkJ1xsOvr5YUmtNQx1uA=\");\n\n_c = SignUpFormCompany;\nexport default SignUpFormCompany;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpFormCompany\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/SignUpFormCompany.js"],"names":["React","useState","Form","Select","$","SignUpFormCompany","company_name","setCompanyName","email","setEmail","pass","setPass","confirm_pass","setConfirmPass","company_name_error","setCompanyNameError","email_error","setEmailError","pass_error","setPassError","confirm_pass_error","setConfirmPassError","city","setCity","loaded","setLoaded","isValid","format","hasUpper","str","test","trim","prevState","concat","length","updateState","func","e","target","value","handleError","on","attr","content","postData","company","name","password","response","fetch","method","headers","JSON","stringify","ok","console","log","getCity","data","json","formatCity","prevData","handleSubmit","preventDefault","formatted_array","i","push","key","_id","text","element","document","getElementById","removeAttribute","cities","children","htmlFor","id"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Form,Select } from 'semantic-ui-react'\r\nimport $ from \"jquery\";\r\n\r\n\r\nfunction SignUpFormCompany(){\r\n\r\n  const [company_name, setCompanyName] = useState(\"\")\r\n  const [email, setEmail] = useState(\"\")\r\n  const [pass, setPass] = useState(\"\")\r\n  const [confirm_pass, setConfirmPass] = useState(\"\")\r\n  const [company_name_error,setCompanyNameError] =useState(\"\")\r\n  const [email_error,setEmailError] =useState(\"\")\r\n  const [pass_error,setPassError] = useState([])\r\n  const [confirm_pass_error,setConfirmPassError] = useState(\"\")\r\n  const [city, setCity] = useState(null);\r\n  const [loaded,setLoaded] = useState(false);\r\n\r\n\r\n  function isValid(){\r\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n    function hasUpper(str){\r\n      return (/[A-Z]/.test(str))\r\n    }\r\n    if(!company_name.trim()){\r\n      setCompanyNameError(prevState => prevState = \"Company name is required\")\r\n    }\r\n    if(!email.trim()){\r\n      setEmailError(prevState => prevState = \"Email required\") \r\n    }else if(!/^[A-Z0-9._%+-]+@[[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)){\r\n      setEmailError(prevState => prevState = \"Email is invalid\");\r\n    }\r\n    if(!pass){\r\n      setPassError(prevState => prevState.concat(\"Password is required\"));\r\n    }if(pass.length < 8){\r\n      setPassError(prevState => prevState.concat(\"Password needs to be at least 8 characters\\n\"));\r\n    }if(!format.test(pass)){\r\n      setPassError(prevState => prevState.concat(\"Passwords must contain at least one special character\\n\"));\r\n    }if(!hasUpper(pass)){\r\n      setPassError(prevState => prevState.concat(\"Password must contain at leat one upper case character\\n\"));\r\n    }\r\n    if(!confirm_pass){\r\n      setConfirmPassError(prevState => prevState = \"This field is reuired\") ;\r\n    }else if(pass !== confirm_pass){\r\n      setConfirmPassError(prevState => prevState = \"Passwords must match\");\r\n    }\r\n  }\r\n\r\n  function updateState(func,e){\r\n    func(prevState => prevState = e.target.value)\r\n  }\r\n\r\n  //FIXME:Con't show the error messages\r\n  function handleError() {\r\n    $(function(){\r\n      $(\"#submit\").on(\"click\",function(){\r\n        $(\"#companyNameInput\").attr(\"error\",{ content: company_name_error});\r\n        $(\"#companyEmailInput\").attr(\"error\",{ content: email_error});\r\n        $(\"#companyPassInput\").attr(\"error\",{ content: pass_error});\r\n        $(\"#companyConfirmPassInput\").attr(\"error\",{ content: confirm_pass_error});\r\n      })\r\n    })\r\n    }\r\n\r\n    \r\n  async function postData(){\r\n    const company = {name:company_name,email:email,password:pass};\r\n    const response = await fetch(\"/SignUpCompany\",{\r\n      method:\"POST\",\r\n      headers:{\r\n        \"Content-type\":\"application/json; charset=UTF-8\"\r\n      },\r\n      \"body\":JSON.stringify(company)\r\n    }) \r\n    if(response.ok){\r\n      console.log(\"okkkk\")\r\n    }\r\n    else{\r\n      console.log(\"nöööö\")\r\n    }\r\n  }\r\n\r\n  async function getCity(){\r\n    const response = await fetch(\"/GetCity\")\r\n    const data = await response.json()\r\n    const city = formatCity(data)\r\n    setCity(prevData => prevData = city);\r\n    setLoaded(prevData => prevData = true)\r\n    return city;\r\n  }\r\n  \r\n  async function handleSubmit(e){\r\n    e.preventDefault();\r\n    isValid();\r\n    postData();\r\n    //handleError();\r\n  }\r\n\r\n  function formatCity(data){\r\n    var formatted_array = []\r\n    for(var i = 0;i<data.length;i++){\r\n      formatted_array.push({key:data[i]._id,text:data[i].name,value:data[i]._id})\r\n    }\r\n    return formatted_array\r\n  }  \r\n\r\n  if(loaded === true){\r\n    const element = document.getElementById(\"form\");\r\n    element.removeAttribute(\"loading\");\r\n  }\r\n\r\n  const cities = getCity();\r\n\r\n  return (\r\n    <div>\r\n      <Form id = \"form\" onSubmit = {e => handleSubmit(e)} >\r\n        <div>\r\n          <Form.Input id = \"companyNameInput\" fluid label='Company Name' placeholder='Name' value={company_name} onChange={e => updateState(setCompanyName,e)}/>\r\n        </div>\r\n        <div>\r\n          <Form.Input id = \"companyEmailInput\" fluid  type=\"email\" label='Company Email' placeholder='Email' value={email} onChange={e => updateState(setEmail,e)}/>\r\n        </div> \r\n        <div>\r\n          <Form.Field\r\n            control={Select}\r\n            options={city}\r\n            label={{ children: 'City', htmlFor: 'form-select-control-city' }}\r\n            placeholder='City'\r\n            search\r\n            searchInput={{ id: 'form-select-control-gender' }}\r\n          />\r\n        </div>       \r\n        <div>\r\n          <Form.Input id = \"companyPassInput\" fluid label='Enter Password' type='password' value={pass} onChange={e => updateState(setPass,e)}/>\r\n        </div>\r\n        <div>\r\n          <Form.Input id = \"companyConfirmPassInput\" fluid label='Confirm Password' type='password' value={confirm_pass} onChange={e => updateState(setConfirmPass,e)}/>\r\n        </div>\r\n        <Form.Button id=\"submit\">Sign Up</Form.Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpFormCompany;"]},"metadata":{},"sourceType":"module"}