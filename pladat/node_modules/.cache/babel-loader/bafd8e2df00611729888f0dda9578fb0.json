{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\supcomp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Select } from \"material-ui-formik-components/Select\";\n\nfunction SignUpFormCompanyy() {\n  _s();\n\n  const mockitems = [{\n    label: \"ist\",\n    value: 34\n  }, {\n    label: \"ankara\",\n    value: 6\n  }];\n  const [city, setCity] = useState();\n\n  const yup = require(\"yup\");\n\n  require(\"yup-password\")(yup);\n\n  const sigUpSchema = Yup.object().shape({\n    name: Yup.string().min(2, \"Company name is too short\").required(\"Company name is required\"),\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Email is required\"),\n    city: Yup.number().required(\"Please select a city\"),\n    password: Yup.string().password().required(\"Password is required\").min(8, \"pass 8\").minLowercase(1, \"has min low\").minUppercase(1, \"has min high\").minNumber(1, \"has min num\").minSymbol(1, \"has min sym\"),\n    confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n  });\n\n  async function getCity() {\n    const response = await fetch(\"/GetCity\");\n    const data = await response.json();\n    const cities = formatCity(data);\n    setCity(cities);\n    setLoaded(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      city: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    onSubmit: values => {\n      alert(`Name: ${values.name}\\nCity: ${values.city}`);\n    },\n    validationSchema: sigUpSchema,\n    children: formik => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"name\",\n        label: \"Name\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"email\",\n        label: \"Email\",\n        type: \"email\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        required: true,\n        fullWidth: true,\n        name: \"city\",\n        label: \"City\",\n        options: mockitems,\n        component: Select\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        required: true,\n        fullWidth: true,\n        name: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        required: true,\n        fullWidth: true,\n        name: \"confirmPassword\",\n        label: \"Confirm Password\",\n        type: \"password\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formik.dirty || !formik.isValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpFormCompanyy, \"8eaE/wPUlgHhb4H16jYWBCnf73Y=\");\n\n_c = SignUpFormCompanyy;\nexport default SignUpFormCompanyy;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpFormCompanyy\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/supcomp.js"],"names":["React","useState","Formik","Form","Field","useFormik","Yup","TextField","Select","SignUpFormCompanyy","mockitems","label","value","city","setCity","yup","require","sigUpSchema","object","shape","name","string","min","required","email","number","password","minLowercase","minUppercase","minNumber","minSymbol","confirmPassword","oneOf","ref","getCity","response","fetch","data","json","cities","formatCity","setLoaded","values","alert","formik","dirty","isValid"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,SAA9B,QAA+C,QAA/C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,yCAA1B;AACA,SAASC,MAAT,QAAuB,sCAAvB;;AAEA,SAASC,kBAAT,GAA8B;AAAA;;AAC5B,QAAMC,SAAS,GAAG,CAChB;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GADgB,EAEhB;AAAED,IAAAA,KAAK,EAAE,QAAT;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAFgB,CAAlB;AAIA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC;;AACA,QAAMc,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACAA,EAAAA,OAAO,CAAC,cAAD,CAAP,CAAwBD,GAAxB;;AAEA,QAAME,WAAW,GAAGX,GAAG,CAACY,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,IAAAA,IAAI,EAAEd,GAAG,CAACe,MAAJ,GACHC,GADG,CACC,CADD,EACI,2BADJ,EAEHC,QAFG,CAEM,0BAFN,CAD+B;AAIrCC,IAAAA,KAAK,EAAElB,GAAG,CAACe,MAAJ,GACJG,KADI,CACE,4BADF,EAEJD,QAFI,CAEK,mBAFL,CAJ8B;AAOrCV,IAAAA,IAAI,EAAEP,GAAG,CAACmB,MAAJ,GAAaF,QAAb,CAAsB,sBAAtB,CAP+B;AASrCG,IAAAA,QAAQ,EAAEpB,GAAG,CAACe,MAAJ,GACPK,QADO,GAEPH,QAFO,CAEE,sBAFF,EAGPD,GAHO,CAGH,CAHG,EAGA,QAHA,EAIPK,YAJO,CAIM,CAJN,EAIS,aAJT,EAKPC,YALO,CAKM,CALN,EAKS,cALT,EAMPC,SANO,CAMG,CANH,EAMM,aANN,EAOPC,SAPO,CAOG,CAPH,EAOM,aAPN,CAT2B;AAiBrCC,IAAAA,eAAe,EAAEzB,GAAG,CAACe,MAAJ,GAAaW,KAAb,CACf,CAAC1B,GAAG,CAAC2B,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CADe,EAEf,sBAFe;AAjBoB,GAAnB,CAApB;;AAuBA,iBAAeC,OAAf,GAAyB;AACvB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAMC,MAAM,GAAGC,UAAU,CAACH,IAAD,CAAzB;AAEAvB,IAAAA,OAAO,CAACyB,MAAD,CAAP;AACAE,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbrB,MAAAA,IAAI,EAAE,EADO;AAEbI,MAAAA,KAAK,EAAE,EAFM;AAGbX,MAAAA,IAAI,EAAE,EAHO;AAIba,MAAAA,QAAQ,EAAE,EAJG;AAKbK,MAAAA,eAAe,EAAE;AALJ,KADjB;AAQE,IAAA,QAAQ,EAAGW,MAAD,IAAY;AACpBC,MAAAA,KAAK,CAAE,SAAQD,MAAM,CAACtB,IAAK,WAAUsB,MAAM,CAAC7B,IAAK,EAA5C,CAAL;AACD,KAVH;AAWE,IAAA,gBAAgB,EAAEI,WAXpB;AAAA,cAaI2B,MAAD,iBACC,QAAC,IAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,KAAK,EAAC,MAAzB;AAAgC,QAAA,SAAS,EAAErC;AAA3C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,KAAK,EAAC,OAFR;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,SAAS,EAAEA;AAJb;AAAA;AAAA;AAAA;AAAA,cAFF,eAQE,QAAC,KAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,KAAK,EAAC,MAJR;AAKE,QAAA,OAAO,EAAEG,SALX;AAME,QAAA,SAAS,EAAEF;AANb;AAAA;AAAA;AAAA;AAAA,cARF,eAgBE,QAAC,KAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,KAAK,EAAC,UAJR;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,SAAS,EAAED;AANb;AAAA;AAAA;AAAA;AAAA,cAhBF,eAwBE,QAAC,KAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,IAAI,EAAC,iBAHP;AAIE,QAAA,KAAK,EAAC,kBAJR;AAKE,QAAA,IAAI,EAAC,UALP;AAME,QAAA,SAAS,EAAEA;AANb;AAAA;AAAA;AAAA;AAAA,cAxBF,eAgCE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,QAAQ,EAAE,CAACqC,MAAM,CAACC,KAAR,IAAiB,CAACD,MAAM,CAACE,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAdJ;AAAA;AAAA;AAAA;AAAA,UADF;AAsDD;;GA/FQrC,kB;;KAAAA,kB;AAiGT,eAAeA,kBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\n\r\nfunction SignUpFormCompanyy() {\r\n  const mockitems = [\r\n    { label: \"ist\", value: 34 },\r\n    { label: \"ankara\", value: 6 },\r\n  ];\r\n  const [city, setCity] = useState();\r\n  const yup = require(\"yup\");\r\n  require(\"yup-password\")(yup);\r\n\r\n  const sigUpSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, \"Company name is too short\")\r\n      .required(\"Company name is required\"),\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Email is required\"),\r\n    city: Yup.number().required(\"Please select a city\"),\r\n\r\n    password: Yup.string()\r\n      .password()\r\n      .required(\"Password is required\")\r\n      .min(8, \"pass 8\")\r\n      .minLowercase(1, \"has min low\")\r\n      .minUppercase(1, \"has min high\")\r\n      .minNumber(1, \"has min num\")\r\n      .minSymbol(1, \"has min sym\"),\r\n    confirmPassword: Yup.string().oneOf(\r\n      [Yup.ref(\"password\"), null],\r\n      \"Passwords must match\"\r\n    ),\r\n  });\r\n\r\n  async function getCity() {\r\n    const response = await fetch(\"/GetCity\");\r\n    const data = await response.json();\r\n    const cities = formatCity(data);\r\n\r\n    setCity(cities);\r\n    setLoaded(true);\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        email: \"\",\r\n        city: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n      }}\r\n      onSubmit={(values) => {\r\n        alert(`Name: ${values.name}\\nCity: ${values.city}`);\r\n      }}\r\n      validationSchema={sigUpSchema}\r\n    >\r\n      {(formik) => (\r\n        <Form>\r\n          <Field name=\"name\" label=\"Name\" component={TextField} />\r\n          <Field\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            component={TextField}\r\n          />\r\n          <Field\r\n            required\r\n            fullWidth\r\n            name=\"city\"\r\n            label=\"City\"\r\n            options={mockitems}\r\n            component={Select}\r\n          />\r\n          <Field\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            component={TextField}\r\n          />\r\n          <Field\r\n            required\r\n            fullWidth\r\n            name=\"confirmPassword\"\r\n            label=\"Confirm Password\"\r\n            type=\"password\"\r\n            component={TextField}\r\n          />\r\n          <button type=\"submit\" disabled={!formik.dirty || !formik.isValid}>\r\n            Submit\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default SignUpFormCompanyy;\r\n"]},"metadata":{},"sourceType":"module"}