{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\SignUpFormCompanyy.js\";\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Password from \"./FormikField/PasswordInput\";\nimport Select from \"./FormikField/Select\";\n\nfunction SignUpFormCompanyy() {\n  const initialValues = {\n    name: \"\",\n    email: \"\",\n    city: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  };\n  const mockitems = [{\n    label: \"ist\",\n    value: \"34\"\n  }, {\n    label: \"ankara\",\n    value: \"6\"\n  }];\n\n  const yup = require(\"yup\");\n\n  require(\"yup-password\")(yup);\n\n  function handleSubmit(values) {\n    console.log(\"afahefn\");\n    console.log(values);\n  }\n\n  const sigUpSchema = Yup.object().shape({\n    name: Yup.string().min(2, \"Company name is too short\").required(\"Company name is required\"),\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Email is required\"),\n    city: Yup.string().required(\"Please select a city\"),\n    password: Yup.string().password().required(\"Password is required\").min(8, \"pass 8\").minLowercase(1, \"has min low\").minUppercase(1, \"has min high\").minNumber(1, \"has min num\").minSymbol(1, \"has min sym\"),\n    confirmPassword: Yup.string().required(\"is req\")\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: handleSubmit,\n      validationSchema: sigUpSchema,\n      children: ({\n        dirty,\n        isValid\n      }) => {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"standard-basic\",\n              label: \"Company Name\",\n              name: \"name\",\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              id: \"standard-basic\",\n              label: \"Email\",\n              name: \"email\",\n              type: \"email\",\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              fullWidth: true,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"standard-adornment-password\",\n                children: props.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                name: props.name,\n                type: visible ? \"text\" : \"password\",\n                endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                  position: \"end\",\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    \"aria-label\": \"toggle password visibility\",\n                    onClick: () => setVisible(prev => prev = !prev),\n                    onMouseDown: e => e.preventDefault(),\n                    children: visible ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 38\n                    }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 55\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Password, {\n              name: \"password\",\n              label: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Password, {\n              name: \"confirmPassword\",\n              label: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: !dirty || !isValid,\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SignUpFormCompanyy;\nexport default SignUpFormCompanyy;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpFormCompanyy\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/SignUpFormCompanyy.js"],"names":["React","useState","Formik","Form","Field","useFormik","Yup","TextField","Password","Select","SignUpFormCompanyy","initialValues","name","email","city","password","confirmPassword","mockitems","label","value","yup","require","handleSubmit","values","console","log","sigUpSchema","object","shape","string","min","required","minLowercase","minUppercase","minNumber","minSymbol","dirty","isValid","props","visible","setVisible","prev","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Password from \"./FormikField/PasswordInput\";\r\nimport Select from \"./FormikField/Select\";\r\n\r\nfunction SignUpFormCompanyy() {\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    city: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  };\r\n  const mockitems = [\r\n    { label: \"ist\", value: \"34\" },\r\n    { label: \"ankara\", value: \"6\" },\r\n  ];\r\n  const yup = require(\"yup\");\r\n  require(\"yup-password\")(yup);\r\n\r\n  function handleSubmit(values) {\r\n    console.log(\"afahefn\");\r\n    console.log(values);\r\n  }\r\n  const sigUpSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, \"Company name is too short\")\r\n      .required(\"Company name is required\"),\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Email is required\"),\r\n    city: Yup.string().required(\"Please select a city\"),\r\n    password: Yup.string()\r\n      .password()\r\n      .required(\"Password is required\")\r\n      .min(8, \"pass 8\")\r\n      .minLowercase(1, \"has min low\")\r\n      .minUppercase(1, \"has min high\")\r\n      .minNumber(1, \"has min num\")\r\n      .minSymbol(1, \"has min sym\"),\r\n    confirmPassword: Yup.string().required(\"is req\"),\r\n  });\r\n  return (\r\n    <div>\r\n      <h1>Sign Up</h1>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={sigUpSchema}\r\n      >\r\n        {({ dirty, isValid }) => {\r\n          return (\r\n            <Form>\r\n              <div>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Company Name\"\r\n                  name=\"name\"\r\n                  required\r\n                  fullWidth\r\n                />\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  required\r\n                  fullWidth\r\n                />\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <FormControl fullWidth required>\r\n                  <InputLabel htmlFor=\"standard-adornment-password\">\r\n                    {props.label}\r\n                  </InputLabel>\r\n                  <Input\r\n                    name={props.name}\r\n                    type={visible ? \"text\" : \"password\"}\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={() => setVisible((prev) => (prev = !prev))}\r\n                          onMouseDown={(e) => e.preventDefault()}\r\n                        >\r\n                          {visible ? <Visibility /> : <VisibilityOff />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  ></Input>\r\n                </FormControl>\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <Password name=\"password\" label=\"Password\"></Password>\r\n              </div>\r\n              <br />\r\n              <div>\r\n                <Password\r\n                  name=\"confirmPassword\"\r\n                  label=\"Confirm Password\"\r\n                ></Password>\r\n              </div>\r\n              <br />\r\n              <button disabled={!dirty || !isValid} type=\"submit\">\r\n                Submit\r\n              </button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpFormCompanyy;\r\n"]},"metadata":{},"sourceType":"module"}