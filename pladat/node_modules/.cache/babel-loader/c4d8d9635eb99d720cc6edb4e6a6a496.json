{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\SignUpStudent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nfunction SignUpStudent() {\n  _s();\n\n  const [loadingCircle, setLoadingCircle] = useState(\"block\");\n  const [content, setContent] = useState(\"none\");\n  const [university, setUniversity] = useState([]);\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false); //for firebase\n\n  const {\n    signup\n  } = useAuth();\n  const sigUpSchema = Yup.object().shape({\n    name: Yup.string().min(2, \"Name is too short\").required(\"Name is required\"),\n    surname: Yup.string().min(2, \"Surname is too short\").required(\"Surname is required\"),\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Email is required\"),\n    university: Yup.number().required(\"Please select a university\"),\n    studentID: Yup.number().required(\"Please enter your student ID number\"),\n    password: Yup.string().required(\"Password is required\").min(8, \"pass 8\"),\n    confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n  });\n\n  function formatUniversity(data) {\n    var formatted_array = [];\n\n    for (var i = 0; i < data.length; i++) {\n      formatted_array.push({\n        value: data[i]._id,\n        label: data[i].name\n      });\n    }\n\n    return formatted_array;\n  }\n\n  async function getUniversity() {\n    const response = await fetch(\"/GetUniversity\");\n    const data = await response.json();\n    const universities = formatUniversity(data);\n    setUniversity(universities);\n    setLoadingCircle(\"none\");\n    setContent(\"block\");\n  }\n\n  async function postData(student) {\n    delete student.confirmPassword;\n    const response = await fetch(\"/SignUpStudent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify(student)\n    });\n    console.log(response.status);\n\n    if (response.ok) {\n      console.log(\"okkkk\");\n    } else {\n      console.log(\"nöööö\");\n    }\n  } //TODO: If oneof the sign up attempts fails the other one sould be deleted\n\n\n  async function handleSubmit(values) {\n    try {\n      setError(\"\");\n      setLoading(true);\n      postData(values);\n      await signup(values.email, values.password);\n    } catch {\n      console.log(\"catch\");\n      setError(\"Failed to create an account on firebase\");\n    }\n\n    setLoading(false);\n  }\n\n  if (university.length < 1) {\n    getUniversity();\n  } //TODO: There should bu be an alert if sign up fails\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: loadingCircle\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: content\n      },\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          name: \"\",\n          surname: \"\",\n          email: \"\",\n          university: \"\",\n          studentID: \"\",\n          city: \"\",\n          password: \"\",\n          confirmPassword: \"\"\n        },\n        onSubmit: handleSubmit,\n        validationSchema: sigUpSchema,\n        children: formik => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            name: \"name\",\n            label: \"Name\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            name: \"surname\",\n            label: \"Surname\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            name: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            fullWidth: true,\n            name: \"university\",\n            label: \"University\",\n            options: university,\n            component: Select\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"studentID\",\n            label: \"Student ID Number\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            fullWidth: true,\n            name: \"password\",\n            label: \"Password\",\n            type: \"password\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            fullWidth: true,\n            name: \"confirmPassword\",\n            label: \"Confirm Password\",\n            type: \"password\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: !formik.dirty || !formik.isValid || loading,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpStudent, \"6SDnMZihewmIC/Pfd01sneBWgOA=\", false, function () {\n  return [useAuth];\n});\n\n_c = SignUpStudent;\nexport default SignUpStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpStudent\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/SignUpStudent.js"],"names":["React","useState","Formik","Form","Field","Yup","TextField","Select","CircularProgress","useAuth","SignUpStudent","loadingCircle","setLoadingCircle","content","setContent","university","setUniversity","error","setError","loading","setLoading","signup","sigUpSchema","object","shape","name","string","min","required","surname","email","number","studentID","password","confirmPassword","oneOf","ref","formatUniversity","data","formatted_array","i","length","push","value","_id","label","getUniversity","response","fetch","json","universities","postData","student","method","headers","body","JSON","stringify","console","log","status","ok","handleSubmit","values","display","city","formik","dirty","isValid"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\nfunction SignUpStudent() {\r\n  const [loadingCircle, setLoadingCircle] = useState(\"block\");\r\n  const [content, setContent] = useState(\"none\");\r\n  const [university, setUniversity] = useState([]);\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(false); //for firebase\r\n  const { signup } = useAuth();\r\n\r\n  const sigUpSchema = Yup.object().shape({\r\n    name: Yup.string().min(2, \"Name is too short\").required(\"Name is required\"),\r\n    surname: Yup.string()\r\n      .min(2, \"Surname is too short\")\r\n      .required(\"Surname is required\"),\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Email is required\"),\r\n    university: Yup.number().required(\"Please select a university\"),\r\n    studentID: Yup.number().required(\"Please enter your student ID number\"),\r\n    password: Yup.string().required(\"Password is required\").min(8, \"pass 8\"),\r\n    confirmPassword: Yup.string().oneOf(\r\n      [Yup.ref(\"password\"), null],\r\n      \"Passwords must match\"\r\n    ),\r\n  });\r\n\r\n  function formatUniversity(data) {\r\n    var formatted_array = [];\r\n    for (var i = 0; i < data.length; i++) {\r\n      formatted_array.push({\r\n        value: data[i]._id,\r\n        label: data[i].name,\r\n      });\r\n    }\r\n    return formatted_array;\r\n  }\r\n\r\n  async function getUniversity() {\r\n    const response = await fetch(\"/GetUniversity\");\r\n    const data = await response.json();\r\n    const universities = formatUniversity(data);\r\n    setUniversity(universities);\r\n    setLoadingCircle(\"none\");\r\n    setContent(\"block\");\r\n  }\r\n\r\n  async function postData(student) {\r\n    delete student.confirmPassword;\r\n    const response = await fetch(\"/SignUpStudent\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify(student),\r\n    });\r\n    console.log(response.status);\r\n    if (response.ok) {\r\n      console.log(\"okkkk\");\r\n    } else {\r\n      console.log(\"nöööö\");\r\n    }\r\n  }\r\n  //TODO: If oneof the sign up attempts fails the other one sould be deleted\r\n  async function handleSubmit(values) {\r\n    try {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      postData(values);\r\n      await signup(values.email, values.password);\r\n    } catch {\r\n      console.log(\"catch\");\r\n      setError(\"Failed to create an account on firebase\");\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  if (university.length < 1) {\r\n    getUniversity();\r\n  }\r\n  //TODO: There should bu be an alert if sign up fails\r\n  return (\r\n    <div>\r\n      <div style={{ display: loadingCircle }}>\r\n        <CircularProgress />\r\n      </div>\r\n\r\n      <div style={{ display: content }}>\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            surname: \"\",\r\n            email: \"\",\r\n            university: \"\",\r\n            studentID: \"\",\r\n            city: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={sigUpSchema}\r\n        >\r\n          {(formik) => (\r\n            <Form>\r\n              <Field required name=\"name\" label=\"Name\" component={TextField} />\r\n              <Field\r\n                required\r\n                name=\"surname\"\r\n                label=\"Surname\"\r\n                component={TextField}\r\n              />\r\n              <Field\r\n                required\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                component={TextField}\r\n              />\r\n              <Field\r\n                required\r\n                fullWidth\r\n                name=\"university\"\r\n                label=\"University\"\r\n                options={university}\r\n                component={Select}\r\n              />\r\n              <Field\r\n                name=\"studentID\"\r\n                label=\"Student ID Number\"\r\n                component={TextField}\r\n              />\r\n              <Field\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                component={TextField}\r\n              />\r\n              <Field\r\n                required\r\n                fullWidth\r\n                name=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                component={TextField}\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!formik.dirty || !formik.isValid || loading}\r\n              >\r\n                Submit\r\n              </button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpStudent;\r\n"]},"metadata":{},"sourceType":"module"}