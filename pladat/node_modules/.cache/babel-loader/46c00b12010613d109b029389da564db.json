{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\SignUpFormCompany.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Select } from 'semantic-ui-react';\nimport $ from \"jquery\";\n\nfunction SignUpFormCompany() {\n  _s();\n\n  const [company_name, setCompanyName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  const [confirm_pass, setConfirmPass] = useState(\"\");\n  const [company_name_error, setCompanyNameError] = useState(\"\");\n  const [email_error, setEmailError] = useState(\"\");\n  const [pass_error, setPassError] = useState([]);\n  const [confirm_pass_error, setConfirmPassError] = useState(\"\");\n\n  function isValid() {\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n    function hasUpper(str) {\n      return /[A-Z]/.test(str);\n    }\n\n    if (!company_name.trim()) {\n      setCompanyNameError(prevState => prevState = \"Company name is required\");\n    }\n\n    if (!email.trim()) {\n      setEmailError(prevState => prevState = \"Email required\");\n    } else if (!/^[A-Z0-9._%+-]+@[[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)) {\n      setEmailError(prevState => prevState = \"Email is invalid\");\n    }\n\n    if (!pass) {\n      setPassError(prevState => prevState.concat(\"Password is required\"));\n    }\n\n    if (pass.length < 8) {\n      setPassError(prevState => prevState.concat(\"Password needs to be at least 8 characters\\n\"));\n    }\n\n    if (!format.test(pass)) {\n      setPassError(prevState => prevState.concat(\"Passwords must contain at least one special character\\n\"));\n    }\n\n    if (!hasUpper(pass)) {\n      setPassError(prevState => prevState.concat(\"Password must contain at leat one upper case character\\n\"));\n    }\n\n    if (!confirm_pass) {\n      setConfirmPassError(prevState => prevState = \"This field is reuired\");\n    } else if (pass !== confirm_pass) {\n      setConfirmPassError(prevState => prevState = \"Passwords must match\");\n    }\n  }\n\n  function updateState(func, e) {\n    func(prevState => prevState = e.target.value);\n  } //FIXME:Con't show the error messages\n\n\n  function handleError() {\n    $(function () {\n      $(\"#submit\").on(\"click\", function () {\n        $(\"#companyNameInput\").attr(\"error\", {\n          content: company_name_error\n        });\n        $(\"#companyEmailInput\").attr(\"error\", {\n          content: email_error\n        });\n        $(\"#companyPassInput\").attr(\"error\", {\n          content: pass_error\n        });\n        $(\"#companyConfirmPassInput\").attr(\"error\", {\n          content: confirm_pass_error\n        });\n      });\n    });\n  }\n\n  async function postData() {\n    const company = {\n      name: company_name,\n      email: email,\n      password: pass\n    };\n    const response = await fetch(\"/SignUpCompany\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      \"body\": JSON.stringify(company)\n    });\n\n    if (response.ok) {\n      console.log(\"okkkk\");\n    } else {\n      console.log(\"nöööö\");\n    }\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    isValid();\n    postData();\n    getCity(); //handleError();\n  }\n\n  async function getCity() {\n    var city_array = [];\n\n    function ph(d) {\n      city_array.push(d);\n    }\n\n    await fetch(\"/GetCity\").then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return {};\n      }\n    }).then(data => data.forEach(ph));\n    return city_array;\n  } // const city_response = () => {\n  //   fetch(\"/GetCity\").then(response => {\n  //     if(response.ok){\n  //       console.log(response.json())\n  //       console.log(\"yesyes\")\n  //       return response.json()\n  //     }\n  //     else{\n  //       console.log(\"nono\")\n  //       return {}\n  //     }\n  //   })\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: e => handleSubmit(e),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyNameInput\",\n          fluid: true,\n          label: \"Company Name\",\n          placeholder: \"Name\",\n          value: company_name,\n          onChange: e => updateState(setCompanyName, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyEmailInput\",\n          fluid: true,\n          type: \"email\",\n          label: \"Company Email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => updateState(setEmail, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyPassInput\",\n          fluid: true,\n          label: \"Enter Password\",\n          type: \"password\",\n          value: pass,\n          onChange: e => updateState(setPass, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Form.Input, {\n          id: \"companyConfirmPassInput\",\n          fluid: true,\n          label: \"Confirm Password\",\n          type: \"password\",\n          value: confirm_pass,\n          onChange: e => updateState(setConfirmPass, e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n        id: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpFormCompany, \"87AFCo+ySVGC9EZA5YjryTwMnU0=\");\n\n_c = SignUpFormCompany;\nexport default SignUpFormCompany;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpFormCompany\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/SignUpFormCompany.js"],"names":["React","useState","Form","Select","$","SignUpFormCompany","company_name","setCompanyName","email","setEmail","pass","setPass","confirm_pass","setConfirmPass","company_name_error","setCompanyNameError","email_error","setEmailError","pass_error","setPassError","confirm_pass_error","setConfirmPassError","isValid","format","hasUpper","str","test","trim","prevState","concat","length","updateState","func","e","target","value","handleError","on","attr","content","postData","company","name","password","response","fetch","method","headers","JSON","stringify","ok","console","log","handleSubmit","preventDefault","getCity","city_array","ph","d","push","then","json","data","forEach"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { Form,Select } from 'semantic-ui-react'\r\nimport $ from \"jquery\";\r\n\r\n\r\nfunction SignUpFormCompany(){\r\n\r\n  const [company_name, setCompanyName] = useState(\"\")\r\n  const [email, setEmail] = useState(\"\")\r\n  const [pass, setPass] = useState(\"\")\r\n  const [confirm_pass, setConfirmPass] = useState(\"\")\r\n  const [company_name_error,setCompanyNameError] =useState(\"\")\r\n  const [email_error,setEmailError] =useState(\"\")\r\n  const [pass_error,setPassError] = useState([])\r\n  const [confirm_pass_error,setConfirmPassError] = useState(\"\")\r\n\r\n  function isValid(){\r\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n    function hasUpper(str){\r\n      return (/[A-Z]/.test(str))\r\n    }\r\n    if(!company_name.trim()){\r\n      setCompanyNameError(prevState => prevState = \"Company name is required\")\r\n    }\r\n    if(!email.trim()){\r\n      setEmailError(prevState => prevState = \"Email required\") \r\n    }else if(!/^[A-Z0-9._%+-]+@[[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)){\r\n      setEmailError(prevState => prevState = \"Email is invalid\");\r\n    }\r\n    if(!pass){\r\n      setPassError(prevState => prevState.concat(\"Password is required\"));\r\n    }if(pass.length < 8){\r\n      setPassError(prevState => prevState.concat(\"Password needs to be at least 8 characters\\n\"));\r\n    }if(!format.test(pass)){\r\n      setPassError(prevState => prevState.concat(\"Passwords must contain at least one special character\\n\"));\r\n    }if(!hasUpper(pass)){\r\n      setPassError(prevState => prevState.concat(\"Password must contain at leat one upper case character\\n\"));\r\n    }\r\n    if(!confirm_pass){\r\n      setConfirmPassError(prevState => prevState = \"This field is reuired\") ;\r\n    }else if(pass !== confirm_pass){\r\n      setConfirmPassError(prevState => prevState = \"Passwords must match\");\r\n    }\r\n  }\r\n\r\n  function updateState(func,e){\r\n    func(prevState => prevState = e.target.value)\r\n  }\r\n\r\n  //FIXME:Con't show the error messages\r\n  function handleError() {\r\n    $(function(){\r\n      $(\"#submit\").on(\"click\",function(){\r\n        $(\"#companyNameInput\").attr(\"error\",{ content: company_name_error});\r\n        $(\"#companyEmailInput\").attr(\"error\",{ content: email_error});\r\n        $(\"#companyPassInput\").attr(\"error\",{ content: pass_error});\r\n        $(\"#companyConfirmPassInput\").attr(\"error\",{ content: confirm_pass_error});\r\n      })\r\n    })\r\n    }\r\n\r\n    \r\n  async function postData(){\r\n    const company = {name:company_name,email:email,password:pass};\r\n    const response = await fetch(\"/SignUpCompany\",{\r\n      method:\"POST\",\r\n      headers:{\r\n        \"Content-type\":\"application/json; charset=UTF-8\"\r\n      },\r\n      \"body\":JSON.stringify(company)\r\n    }) \r\n    if(response.ok){\r\n      console.log(\"okkkk\")\r\n    }\r\n    else{\r\n      console.log(\"nöööö\")\r\n    }\r\n  }\r\n\r\n  function handleSubmit(e){\r\n    e.preventDefault();\r\n    isValid();\r\n    postData();\r\n    getCity();\r\n    //handleError();\r\n  }\r\n\r\n  async function getCity(){\r\n    var city_array = []\r\n    function ph(d){\r\n      city_array.push(d);\r\n    }\r\n    await fetch(\"/GetCity\").then(response => {\r\n      if(response.ok){\r\n        return response.json()\r\n      }\r\n      else{\r\n        return {}\r\n      }\r\n    }).then(data => data.forEach(ph))\r\n    return city_array\r\n  }\r\n  \r\n\r\n  // const city_response = () => {\r\n  //   fetch(\"/GetCity\").then(response => {\r\n  //     if(response.ok){\r\n  //       console.log(response.json())\r\n  //       console.log(\"yesyes\")\r\n  //       return response.json()\r\n  //     }\r\n  //     else{\r\n  //       console.log(\"nono\")\r\n  //       return {}\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit = {e => handleSubmit(e)} >\r\n        <div>\r\n          <Form.Input id = \"companyNameInput\" fluid label='Company Name' placeholder='Name' value={company_name} onChange={e => updateState(setCompanyName,e)}/>\r\n        </div>\r\n        <div>\r\n          <Form.Input id = \"companyEmailInput\" fluid  type=\"email\" label='Company Email' placeholder='Email' value={email} onChange={e => updateState(setEmail,e)}/>\r\n        </div> \r\n        {/* <div>\r\n          <Form.Field\r\n            control={Select}\r\n            options={{}}\r\n            label={{ children: 'City', htmlFor: 'form-select-control-city' }}\r\n            placeholder='City'\r\n            search\r\n            searchInput={{ id: 'form-select-control-gender' }}\r\n          />\r\n        </div>        */}\r\n        <div>\r\n          <Form.Input id = \"companyPassInput\" fluid label='Enter Password' type='password' value={pass} onChange={e => updateState(setPass,e)}/>\r\n        </div>\r\n        <div>\r\n          <Form.Input id = \"companyConfirmPassInput\" fluid label='Confirm Password' type='password' value={confirm_pass} onChange={e => updateState(setConfirmPass,e)}/>\r\n        </div>\r\n        <Form.Button id=\"submit\">Sign Up</Form.Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpFormCompany;"]},"metadata":{},"sourceType":"module"}