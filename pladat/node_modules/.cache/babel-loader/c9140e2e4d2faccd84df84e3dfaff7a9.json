{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\SignIn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction SignIn(props) {\n  _s();\n\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false); //for firebase\n\n  const {\n    signin\n  } = useAuth();\n  const history = useHistory();\n  const signInSchema = Yup.object().shape({\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Please enter your email\"),\n    password: Yup.string().required(\"Please enter your password\")\n  });\n\n  async function postData(user) {\n    var url = \"\";\n\n    if (props.user == \"student\") {\n      url = \"/SignInStudent\";\n    } else if (props.user == \"company\") {\n      url = \"/SignInCompany\";\n    }\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify(user)\n    });\n    console.log(response.status);\n    return response;\n  } //TODO: If one of the sign up attempts fails the other one sould be deleted\n\n\n  async function handleSubmit(values) {\n    try {\n      setError(\"\");\n      const response = await postData(values);\n      await signin(values.email, values.password);\n\n      if (response.ok) {\n        console.log(\"okkkk\");\n\n        if (props.user == \"student\") {\n          history.push(\"/HomeStudent\");\n        } else if (props.user == \"company\") {\n          history.push(\"/HomeCompany\");\n        }\n      } else {\n        console.log(\"nöööö\");\n        setError(\"Failed to sign in\");\n      }\n    } catch {\n      console.log(\"catch\");\n      setError(\"Failed to sign in\");\n    }\n  } //TODO: There should bu be an alert if sign in fails\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: \"\",\n          password: \"\"\n        },\n        onSubmit: handleSubmit,\n        validationSchema: signInSchema,\n        children: formik => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            name: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            fullWidth: true,\n            name: \"password\",\n            label: \"Password\",\n            type: \"password\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            type: \"submit\",\n            disabled: !formik.dirty || !formik.isValid || loading,\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Don't have an account?\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/Home/SignUp\",\n          children: \" Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignIn, \"UAKZ4yyy2WxAhYBqwbjsaaA9Lp8=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = SignIn;\nexport default SignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/SignIn.js"],"names":["React","useState","Formik","Form","Field","Yup","TextField","useAuth","Button","Link","useHistory","Paper","SignIn","props","error","setError","loading","setLoading","signin","history","signInSchema","object","shape","email","string","required","password","postData","user","url","response","fetch","method","headers","body","JSON","stringify","console","log","status","handleSubmit","values","ok","push","formik","dirty","isValid"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,yCAA1B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,EAAlC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC,CAFqB,CAE0B;;AAC/C,QAAM;AAAEiB,IAAAA;AAAF,MAAaX,OAAO,EAA1B;AACA,QAAMY,OAAO,GAAGT,UAAU,EAA1B;AAEA,QAAMU,YAAY,GAAGf,GAAG,CAACgB,MAAJ,GAAaC,KAAb,CAAmB;AACtCC,IAAAA,KAAK,EAAElB,GAAG,CAACmB,MAAJ,GACJD,KADI,CACE,4BADF,EAEJE,QAFI,CAEK,yBAFL,CAD+B;AAItCC,IAAAA,QAAQ,EAAErB,GAAG,CAACmB,MAAJ,GAAaC,QAAb,CAAsB,4BAAtB;AAJ4B,GAAnB,CAArB;;AAOA,iBAAeE,QAAf,CAAwBC,IAAxB,EAA8B;AAC5B,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAIhB,KAAK,CAACe,IAAN,IAAc,SAAlB,EAA6B;AAC3BC,MAAAA,GAAG,GAAG,gBAAN;AACD,KAFD,MAEO,IAAIhB,KAAK,CAACe,IAAN,IAAc,SAAlB,EAA6B;AAClCC,MAAAA,GAAG,GAAG,gBAAN;AACD;;AACD,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAChCG,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFuB;AAKhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AAL0B,KAAN,CAA5B;AAOAS,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,MAArB;AACA,WAAOT,QAAP;AACD,GA7BoB,CA+BrB;;;AACA,iBAAeU,YAAf,CAA4BC,MAA5B,EAAoC;AAClC,QAAI;AACF1B,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACA,YAAMe,QAAQ,GAAG,MAAMH,QAAQ,CAACc,MAAD,CAA/B;AACA,YAAMvB,MAAM,CAACuB,MAAM,CAAClB,KAAR,EAAekB,MAAM,CAACf,QAAtB,CAAZ;;AACA,UAAII,QAAQ,CAACY,EAAb,EAAiB;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AACA,YAAIzB,KAAK,CAACe,IAAN,IAAc,SAAlB,EAA6B;AAC3BT,UAAAA,OAAO,CAACwB,IAAR,CAAa,cAAb;AACD,SAFD,MAEO,IAAI9B,KAAK,CAACe,IAAN,IAAc,SAAlB,EAA6B;AAClCT,UAAAA,OAAO,CAACwB,IAAR,CAAa,cAAb;AACD;AACF,OAPD,MAOO;AACLN,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAvB,QAAAA,QAAQ,CAAC,mBAAD,CAAR;AACD;AACF,KAfD,CAeE,MAAM;AACNsB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAvB,MAAAA,QAAQ,CAAC,mBAAD,CAAR;AACD;AACF,GApDoB,CAsDrB;;;AACA,sBACE;AAAA,4BACE;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,aAAa,EAAE;AACbQ,UAAAA,KAAK,EAAE,EADM;AAEbG,UAAAA,QAAQ,EAAE;AAFG,SADjB;AAKE,QAAA,QAAQ,EAAEc,YALZ;AAME,QAAA,gBAAgB,EAAEpB,YANpB;AAAA,kBAQIwB,MAAD,iBACC,QAAC,IAAD;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,KAAK,EAAC,OAFR;AAGE,YAAA,IAAI,EAAC,OAHP;AAIE,YAAA,SAAS,EAAEtC;AAJb;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,KAAD;AACE,YAAA,SAAS,MADX;AAEE,YAAA,IAAI,EAAC,UAFP;AAGE,YAAA,KAAK,EAAC,UAHR;AAIE,YAAA,IAAI,EAAC,UAJP;AAKE,YAAA,SAAS,EAAEA;AALb;AAAA;AAAA;AAAA;AAAA,kBARF,eAeE;AAAA;AAAA;AAAA;AAAA,kBAfF,eAgBE,QAAC,MAAD;AACE,YAAA,OAAO,EAAC,WADV;AAEE,YAAA,KAAK,EAAC,SAFR;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,QAAQ,EAAE,CAACsC,MAAM,CAACC,KAAR,IAAiB,CAACD,MAAM,CAACE,OAAzB,IAAoC9B,OAJhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAuCE;AAAA,6BACE;AAAA,0DAEE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD;;GAvGQJ,M;UAGYL,O,EACHG,U;;;KAJTE,M;AAyGT,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction SignIn(props) {\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(false); //for firebase\r\n  const { signin } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const signInSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Please enter your email\"),\r\n    password: Yup.string().required(\"Please enter your password\"),\r\n  });\r\n\r\n  async function postData(user) {\r\n    var url = \"\";\r\n    if (props.user == \"student\") {\r\n      url = \"/SignInStudent\";\r\n    } else if (props.user == \"company\") {\r\n      url = \"/SignInCompany\";\r\n    }\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify(user),\r\n    });\r\n    console.log(response.status);\r\n    return response;\r\n  }\r\n\r\n  //TODO: If one of the sign up attempts fails the other one sould be deleted\r\n  async function handleSubmit(values) {\r\n    try {\r\n      setError(\"\");\r\n      const response = await postData(values);\r\n      await signin(values.email, values.password);\r\n      if (response.ok) {\r\n        console.log(\"okkkk\");\r\n        if (props.user == \"student\") {\r\n          history.push(\"/HomeStudent\");\r\n        } else if (props.user == \"company\") {\r\n          history.push(\"/HomeCompany\");\r\n        }\r\n      } else {\r\n        console.log(\"nöööö\");\r\n        setError(\"Failed to sign in\");\r\n      }\r\n    } catch {\r\n      console.log(\"catch\");\r\n      setError(\"Failed to sign in\");\r\n    }\r\n  }\r\n\r\n  //TODO: There should bu be an alert if sign in fails\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Formik\r\n          initialValues={{\r\n            email: \"\",\r\n            password: \"\",\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={signInSchema}\r\n        >\r\n          {(formik) => (\r\n            <Form>\r\n              <Field\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                component={TextField}\r\n              />\r\n\r\n              <Field\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                component={TextField}\r\n              />\r\n              <br />\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={!formik.dirty || !formik.isValid || loading}\r\n              >\r\n                Sign In\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n      <div>\r\n        <p>\r\n          Don't have an account?\r\n          <Link to=\"/Home/SignUp\"> Sign Up</Link>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignIn;\r\n"]},"metadata":{},"sourceType":"module"}