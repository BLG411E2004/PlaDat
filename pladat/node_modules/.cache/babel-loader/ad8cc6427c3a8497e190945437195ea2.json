{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nfunction SignUpStudent() {\n  _s();\n\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false); //for firebase\n\n  const {\n    signup\n  } = useAuth();\n  const history = useHistory();\n  const signUpSchema = Yup.object().shape({\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Email is required\")\n  });\n\n  async function postData(student) {\n    delete student.confirmPassword;\n    const response = await fetch(\"/SignUpStudent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify(student)\n    });\n    console.log(response.status);\n    return response;\n  } //TODO: If one of the sign up attempts fails the other one sould be deleted\n\n\n  async function handleSubmit(values) {\n    try {\n      setError(\"\");\n      setLoading(true);\n      const response = await postData(values);\n      await signup(values.email, values.password);\n\n      if (response.ok) {\n        console.log(\"okkkk\");\n        history.push(\"/Home\");\n      } else {\n        console.log(\"nöööö\");\n        setError(\"Failed to create an account on mongoDB\");\n      }\n    } catch {\n      console.log(\"catch\");\n      setError(\"Failed to create an account on firebase\");\n    }\n\n    setLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: \"\"\n        },\n        onSubmit: handleSubmit,\n        validationSchema: signUpSchema,\n        children: formik => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            required: true,\n            name: \"email\",\n            label: \"Email\",\n            type: \"email\",\n            component: TextField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            type: \"submit\",\n            disabled: !formik.dirty || !formik.isValid || loading,\n            children: \"Rset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpStudent, \"6X/B30iwwgaFU/yGrhaMHl5fEKA=\", false, function () {\n  return [useAuth, useHistory];\n});\n\n_c = SignUpStudent;\nexport default SignUpStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpStudent\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/ResetPassword.js"],"names":["React","useState","Formik","Form","Field","Yup","TextField","Select","CircularProgress","useAuth","Button","useHistory","Link","SignUpStudent","error","setError","loading","setLoading","signup","history","signUpSchema","object","shape","email","string","required","postData","student","confirmPassword","response","fetch","method","headers","body","JSON","stringify","console","log","status","handleSubmit","values","password","ok","push","formik","dirty","isValid"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nfunction SignUpStudent() {\r\n  const [error, setError] = useState();\r\n  const [loading, setLoading] = useState(false); //for firebase\r\n  const { signup } = useAuth();\r\n  const history = useHistory();\r\n  const signUpSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Email is required\"),\r\n  });\r\n\r\n  async function postData(student) {\r\n    delete student.confirmPassword;\r\n    const response = await fetch(\"/SignUpStudent\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\",\r\n      },\r\n      body: JSON.stringify(student),\r\n    });\r\n    console.log(response.status);\r\n    return response;\r\n  }\r\n  //TODO: If one of the sign up attempts fails the other one sould be deleted\r\n  async function handleSubmit(values) {\r\n    try {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      const response = await postData(values);\r\n      await signup(values.email, values.password);\r\n      if (response.ok) {\r\n        console.log(\"okkkk\");\r\n        history.push(\"/Home\");\r\n      } else {\r\n        console.log(\"nöööö\");\r\n        setError(\"Failed to create an account on mongoDB\");\r\n      }\r\n    } catch {\r\n      console.log(\"catch\");\r\n      setError(\"Failed to create an account on firebase\");\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Formik\r\n          initialValues={{\r\n            email: \"\",\r\n          }}\r\n          onSubmit={handleSubmit}\r\n          validationSchema={signUpSchema}\r\n        >\r\n          {(formik) => (\r\n            <Form>\r\n              <Field\r\n                required\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                component={TextField}\r\n              />\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                disabled={!formik.dirty || !formik.isValid || loading}\r\n              >\r\n                Rset Password\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpStudent;\r\n"]},"metadata":{},"sourceType":"module"}