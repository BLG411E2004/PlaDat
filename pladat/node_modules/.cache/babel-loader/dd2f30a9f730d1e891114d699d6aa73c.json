{"ast":null,"code":"'use strict'; // pluralize\n\nconst p = function (word, num) {\n  return num === 1 ? word : `${word}s`;\n};\n\nfunction minLowercase(length = 1, message) {\n  const msg = message || '${path} must contain at least ${length} lower-cased ' + p('letter', length);\n  return this.test({\n    name: 'minLowercase',\n    exclusive: true,\n    message: msg,\n    params: {\n      length\n    },\n\n    test(value) {\n      return (value.match(/[a-z]/g) || []).length >= length;\n    }\n\n  });\n} // minLowercase()\n\n\nfunction minUppercase(length = 1, message) {\n  const msg = message || '${path} must contain at least ${length} upper-cased ' + p('letter', length);\n  return this.test({\n    name: 'minUppercase',\n    exclusive: true,\n    message: msg,\n    params: {\n      length\n    },\n\n    test(value) {\n      return (value.match(/[A-Z]/g) || []).length >= length;\n    }\n\n  });\n} // minUppercase()\n\n\nfunction minNumber(length = 1, message) {\n  const msg = message || '${path} must contain at least ${length} ' + p('number', length);\n  return this.test({\n    name: 'minNumber',\n    exclusive: true,\n    message: msg,\n    params: {\n      length\n    },\n\n    test(value) {\n      return (value.match(/[0-9]/g) || []).length >= length;\n    }\n\n  });\n} // minNumber()\n\n\nfunction minSymbol(length = 1, message) {\n  const msg = message || '${path} must contain at least ${length} ' + p('symbol', length);\n  return this.test({\n    name: 'minSymbol',\n    exclusive: true,\n    message: msg,\n    params: {\n      length\n    },\n\n    test(value) {\n      return (value.match(/[^a-zA-Z0-9\\s]/g) || []).length >= length;\n    }\n\n  });\n} // minSymbol()\n\n\nfunction minRepeating(length = 2, message) {\n  const msg = message || '${path} must not contain sequences of more than ${length} repeated ' + p('character', length);\n  return this.test({\n    name: 'minRepeating',\n    exclusive: true,\n    message: msg,\n    params: {\n      length: length\n    },\n\n    test(value) {\n      return !new RegExp(`(.)\\\\1{${length},}`).test(value);\n    }\n\n  });\n} // minRepeating()\n\n\nfunction password() {\n  return this.min(8).max(250).minLowercase(1).minUppercase(1).minNumber(1).minSymbol(1);\n} // password()\n\n\nconst {\n  string: StringSchema\n} = function () {\n  try {\n    return require('yup');\n  } catch (e) {\n    /* istanbul ignore next */\n    throw Error('yup-password requires `yup` package to be installed.');\n  }\n}();\n\nclass PasswordSchema extends StringSchema {\n  constructor() {\n    super();\n  }\n\n}\n\nPasswordSchema.prototype.minLowercase = minLowercase;\nPasswordSchema.prototype.minUppercase = minUppercase;\nPasswordSchema.prototype.minNumber = minNumber;\nPasswordSchema.prototype.minSymbol = minSymbol;\nPasswordSchema.prototype.minRepeating = minRepeating;\nPasswordSchema.prototype.password = password;\n\nfunction setup(yup) {\n  yup.addMethod(yup.string, 'minLowercase', minLowercase);\n  yup.addMethod(yup.string, 'minUppercase', minUppercase);\n  yup.addMethod(yup.string, 'minNumber', minNumber);\n  yup.addMethod(yup.string, 'minSymbol', minSymbol);\n  yup.addMethod(yup.string, 'minRepeating', minRepeating);\n  yup.addMethod(yup.string, 'password', password);\n}\n\nsetup.PasswordSchema = PasswordSchema;\nmodule.exports = setup;","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/node_modules/yup-password/index.js"],"names":["p","word","num","minLowercase","length","message","msg","test","name","exclusive","params","value","match","minUppercase","minNumber","minSymbol","minRepeating","RegExp","password","min","max","string","StringSchema","require","e","Error","PasswordSchema","constructor","prototype","setup","yup","addMethod","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// pluralize\nconst p = function (word, num) {\n    return num === 1 ? word : `${word}s`\n}\n\nfunction minLowercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} lower-cased ' + p('letter', length)\n    return this.test({\n        name: 'minLowercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return (value.match(/[a-z]/g) || []).length >= length\n        }\n    })\n} // minLowercase()\n\nfunction minUppercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} upper-cased ' + p('letter', length)\n    return this.test({\n        name: 'minUppercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return (value.match(/[A-Z]/g) || []).length >= length\n        }\n    })\n} // minUppercase()\n\nfunction minNumber(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('number', length)\n    return this.test({\n        name: 'minNumber',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return (value.match(/[0-9]/g) || []).length >= length\n        }\n    })\n} // minNumber()\n\nfunction minSymbol(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('symbol', length)\n    return this.test({\n        name: 'minSymbol',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return (value.match(/[^a-zA-Z0-9\\s]/g) || []).length >= length\n        }\n    })\n} // minSymbol()\n\nfunction minRepeating(length = 2, message) {\n    const msg = message || '${path} must not contain sequences of more than ${length} repeated ' + p('character', length)\n    return this.test({\n        name: 'minRepeating',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return ! new RegExp(`(.)\\\\1{${length},}`).test(value)\n        }\n    })\n} // minRepeating()\n\nfunction password() {\n    return this\n        .min(8)\n        .max(250)\n        .minLowercase(1)\n        .minUppercase(1)\n        .minNumber(1)\n        .minSymbol(1)\n} // password()\n\nconst { string: StringSchema } = (function() {\n    try {\n        return require('yup')\n    } catch (e) {\n        /* istanbul ignore next */\n        throw Error('yup-password requires `yup` package to be installed.')\n    }\n})()\n\nclass PasswordSchema extends StringSchema {\n    constructor() {\n        super()\n    }\n}\nPasswordSchema.prototype.minLowercase = minLowercase\nPasswordSchema.prototype.minUppercase = minUppercase\nPasswordSchema.prototype.minNumber = minNumber\nPasswordSchema.prototype.minSymbol = minSymbol\nPasswordSchema.prototype.minRepeating = minRepeating\nPasswordSchema.prototype.password = password\n\nfunction setup(yup) {\n    yup.addMethod(yup.string, 'minLowercase', minLowercase)\n    yup.addMethod(yup.string, 'minUppercase', minUppercase)\n    yup.addMethod(yup.string, 'minNumber', minNumber)\n    yup.addMethod(yup.string, 'minSymbol', minSymbol)\n    yup.addMethod(yup.string, 'minRepeating', minRepeating)\n    yup.addMethod(yup.string, 'password', password)\n}\n\nsetup.PasswordSchema = PasswordSchema\n\nmodule.exports = setup\n"]},"metadata":{},"sourceType":"script"}