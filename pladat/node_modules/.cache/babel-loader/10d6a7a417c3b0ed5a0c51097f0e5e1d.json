{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\akgun\\\\Desktop\\\\PlaDat\\\\pladat\\\\src\\\\components\\\\supcomp.js\";\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport Password from \"./FormikField/Password\";\n\nfunction SignUpFormCompanyy() {\n  const mockitems = [{\n    label: \"ist\",\n    value: 34\n  }, {\n    label: \"ankara\",\n    value: 6\n  }];\n  const sigUpSchema = Yup.object().shape({\n    name: Yup.string().min(2, \"Company name is too short\").required(\"Company name is required\"),\n    email: Yup.string().email(\"Please enter a valid email\").required(\"Email is required\"),\n    city: Yup.number().required(\"Please select a city\"),\n    password: Yup.string().required(\"Password is required\").min(8, \"pass 8\").minLowercase(1, \"has min low\").minUppercase(1, \"has min high\").minNumber(1, \"has min num\").minSymbol(1, \"has min sym\"),\n    confirmPassword: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\") // confirmPassword: Yup.string().required(\"is req\"),\n\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: \"\",\n      city: \"\",\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: values => {\n      alert(`Name: ${values.name}\\nCity: ${values.city}\\nEmail: ${values.email}`);\n    },\n    validationSchema: sigUpSchema,\n    children: formik => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"name\",\n        label: \"Name\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"email\",\n        label: \"Email\",\n        type: \"email\",\n        component: TextField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        required: true,\n        fullWidth: true,\n        name: \"city\",\n        label: \"City\",\n        options: mockitems,\n        component: Select\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Password, {\n        name: \"password\",\n        label: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !formik.dirty || !formik.isValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SignUpFormCompanyy;\nexport default SignUpFormCompanyy;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpFormCompanyy\");","map":{"version":3,"sources":["C:/Users/akgun/Desktop/PlaDat/pladat/src/components/supcomp.js"],"names":["React","useState","Formik","Form","Field","useFormik","Yup","TextField","Select","Password","SignUpFormCompanyy","mockitems","label","value","sigUpSchema","object","shape","name","string","min","required","email","city","number","password","minLowercase","minUppercase","minNumber","minSymbol","confirmPassword","oneOf","ref","values","alert","formik","dirty","isValid"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Formik, Form, Field, useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport Password from \"./FormikField/Password\";\r\n\r\nfunction SignUpFormCompanyy() {\r\n  const mockitems = [\r\n    { label: \"ist\", value: 34 },\r\n    { label: \"ankara\", value: 6 },\r\n  ];\r\n  const sigUpSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .min(2, \"Company name is too short\")\r\n      .required(\"Company name is required\"),\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email\")\r\n      .required(\"Email is required\"),\r\n    city: Yup.number().required(\"Please select a city\"),\r\n    password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .min(8, \"pass 8\")\r\n      .minLowercase(1, \"has min low\")\r\n      .minUppercase(1, \"has min high\")\r\n      .minNumber(1, \"has min num\")\r\n      .minSymbol(1, \"has min sym\"),\r\n    confirmPassword: Yup.string().oneOf(\r\n      [Yup.ref(\"password\"), null],\r\n      \"Passwords must match\"\r\n    ),\r\n    // confirmPassword: Yup.string().required(\"is req\"),\r\n  });\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        city: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      }}\r\n      onSubmit={(values) => {\r\n        alert(\r\n          `Name: ${values.name}\\nCity: ${values.city}\\nEmail: ${values.email}`\r\n        );\r\n      }}\r\n      validationSchema={sigUpSchema}\r\n    >\r\n      {(formik) => (\r\n        <Form>\r\n          <Field name=\"name\" label=\"Name\" component={TextField} />\r\n          <Field\r\n            name=\"email\"\r\n            label=\"Email\"\r\n            type=\"email\"\r\n            component={TextField}\r\n          />\r\n          <Field\r\n            required\r\n            fullWidth\r\n            name=\"city\"\r\n            label=\"City\"\r\n            options={mockitems}\r\n            component={Select}\r\n          />\r\n          <Password name=\"password\" label=\"Password\"></Password>\r\n          <button type=\"submit\" disabled={!formik.dirty || !formik.isValid}>\r\n            Submit\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default SignUpFormCompanyy;\r\n"]},"metadata":{},"sourceType":"module"}